
toggleProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2d  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009fc  00000000  00000000  000010c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038b  00000000  00000000  00001ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d5  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00002359  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  dc:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <main>:
#define SW2 PINA1
#define SW3 PINA2
#define SW4 PINA3

int main(void)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	61 97       	sbiw	r28, 0x11	; 17
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	cd bf       	out	0x3d, r28	; 61
    DDRD = 0xFF;
  f8:	8a e2       	ldi	r24, 0x2A	; 42
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
	DDRA = 0x00;
 102:	81 e2       	ldi	r24, 0x21	; 33
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	10 82       	st	Z, r1
	PORTA = 0xFF;
 10a:	82 e2       	ldi	r24, 0x22	; 34
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
	unsigned char temp = 0x00; 
 114:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char num1 = 0x00; 
 116:	19 82       	std	Y+1, r1	; 0x01
	unsigned char num2 = 0x00;
 118:	1b 82       	std	Y+3, r1	; 0x03
	
    while (1) 
    {
		PORTD = 0xFF;
 11a:	8b e2       	ldi	r24, 0x2B	; 43
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
		if ( ( ~PINA & ( 1 << SW1 ) ) ) 
 124:	80 e2       	ldi	r24, 0x20	; 32
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	80 81       	ld	r24, Z
 12c:	88 2f       	mov	r24, r24
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	81 70       	andi	r24, 0x01	; 1
 132:	99 27       	eor	r25, r25
 134:	89 2b       	or	r24, r25
 136:	19 f4       	brne	.+6      	; 0x13e <main+0x5a>
		{
			num1 += 0b00000001;
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	89 83       	std	Y+1, r24	; 0x01
		}
		if ( ( ~PINA & ( 1 << SW2 ) ) )
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	fc 01       	movw	r30, r24
 144:	80 81       	ld	r24, Z
 146:	88 2f       	mov	r24, r24
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	82 70       	andi	r24, 0x02	; 2
 14c:	99 27       	eor	r25, r25
 14e:	89 2b       	or	r24, r25
 150:	19 f4       	brne	.+6      	; 0x158 <main+0x74>
		{
			num1 += 0b00000010;
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	8e 5f       	subi	r24, 0xFE	; 254
 156:	89 83       	std	Y+1, r24	; 0x01
		}
		if ( ( ~PINA & ( 1 << SW3 ) ) )
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	88 2f       	mov	r24, r24
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	84 70       	andi	r24, 0x04	; 4
 166:	99 27       	eor	r25, r25
 168:	89 2b       	or	r24, r25
 16a:	19 f4       	brne	.+6      	; 0x172 <main+0x8e>
		{
			num1 += 0b00000100;
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	8c 5f       	subi	r24, 0xFC	; 252
 170:	89 83       	std	Y+1, r24	; 0x01
		}
		if ( ( ~PINA & ( 1 << SW4 ) ) )
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	88 2f       	mov	r24, r24
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	88 70       	andi	r24, 0x08	; 8
 180:	99 27       	eor	r25, r25
 182:	89 2b       	or	r24, r25
 184:	19 f4       	brne	.+6      	; 0x18c <main+0xa8>
		{
			num1 += 0b00001000;
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	88 5f       	subi	r24, 0xF8	; 248
 18a:	89 83       	std	Y+1, r24	; 0x01
		}
		PORTD = ~temp;
 18c:	8b e2       	ldi	r24, 0x2B	; 43
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	2a 81       	ldd	r18, Y+2	; 0x02
 192:	20 95       	com	r18
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	aa e7       	ldi	r26, 0x7A	; 122
 19e:	b4 e4       	ldi	r27, 0x44	; 68
 1a0:	8c 83       	std	Y+4, r24	; 0x04
 1a2:	9d 83       	std	Y+5, r25	; 0x05
 1a4:	ae 83       	std	Y+6, r26	; 0x06
 1a6:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	4a e7       	ldi	r20, 0x7A	; 122
 1ae:	55 e4       	ldi	r21, 0x45	; 69
 1b0:	6c 81       	ldd	r22, Y+4	; 0x04
 1b2:	7d 81       	ldd	r23, Y+5	; 0x05
 1b4:	8e 81       	ldd	r24, Y+6	; 0x06
 1b6:	9f 81       	ldd	r25, Y+7	; 0x07
 1b8:	0e 94 c5 01 	call	0x38a	; 0x38a <__mulsf3>
 1bc:	dc 01       	movw	r26, r24
 1be:	cb 01       	movw	r24, r22
 1c0:	88 87       	std	Y+8, r24	; 0x08
 1c2:	99 87       	std	Y+9, r25	; 0x09
 1c4:	aa 87       	std	Y+10, r26	; 0x0a
 1c6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 e8       	ldi	r20, 0x80	; 128
 1ce:	5f e3       	ldi	r21, 0x3F	; 63
 1d0:	68 85       	ldd	r22, Y+8	; 0x08
 1d2:	79 85       	ldd	r23, Y+9	; 0x09
 1d4:	8a 85       	ldd	r24, Y+10	; 0x0a
 1d6:	9b 85       	ldd	r25, Y+11	; 0x0b
 1d8:	0e 94 3f 01 	call	0x27e	; 0x27e <__cmpsf2>
 1dc:	88 23       	and	r24, r24
 1de:	2c f4       	brge	.+10     	; 0x1ea <main+0x106>
		__ticks = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	9d 87       	std	Y+13, r25	; 0x0d
 1e6:	8c 87       	std	Y+12, r24	; 0x0c
 1e8:	3f c0       	rjmp	.+126    	; 0x268 <main+0x184>
	else if (__tmp > 65535)
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	3f ef       	ldi	r19, 0xFF	; 255
 1ee:	4f e7       	ldi	r20, 0x7F	; 127
 1f0:	57 e4       	ldi	r21, 0x47	; 71
 1f2:	68 85       	ldd	r22, Y+8	; 0x08
 1f4:	79 85       	ldd	r23, Y+9	; 0x09
 1f6:	8a 85       	ldd	r24, Y+10	; 0x0a
 1f8:	9b 85       	ldd	r25, Y+11	; 0x0b
 1fa:	0e 94 c0 01 	call	0x380	; 0x380 <__gesf2>
 1fe:	18 16       	cp	r1, r24
 200:	4c f5       	brge	.+82     	; 0x254 <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	40 e2       	ldi	r20, 0x20	; 32
 208:	51 e4       	ldi	r21, 0x41	; 65
 20a:	6c 81       	ldd	r22, Y+4	; 0x04
 20c:	7d 81       	ldd	r23, Y+5	; 0x05
 20e:	8e 81       	ldd	r24, Y+6	; 0x06
 210:	9f 81       	ldd	r25, Y+7	; 0x07
 212:	0e 94 c5 01 	call	0x38a	; 0x38a <__mulsf3>
 216:	dc 01       	movw	r26, r24
 218:	cb 01       	movw	r24, r22
 21a:	bc 01       	movw	r22, r24
 21c:	cd 01       	movw	r24, r26
 21e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
 222:	dc 01       	movw	r26, r24
 224:	cb 01       	movw	r24, r22
 226:	9d 87       	std	Y+13, r25	; 0x0d
 228:	8c 87       	std	Y+12, r24	; 0x0c
 22a:	0f c0       	rjmp	.+30     	; 0x24a <main+0x166>
 22c:	80 e9       	ldi	r24, 0x90	; 144
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	9f 87       	std	Y+15, r25	; 0x0f
 232:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 234:	8e 85       	ldd	r24, Y+14	; 0x0e
 236:	9f 85       	ldd	r25, Y+15	; 0x0f
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x154>
 23c:	9f 87       	std	Y+15, r25	; 0x0f
 23e:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 240:	8c 85       	ldd	r24, Y+12	; 0x0c
 242:	9d 85       	ldd	r25, Y+13	; 0x0d
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	9d 87       	std	Y+13, r25	; 0x0d
 248:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24a:	8c 85       	ldd	r24, Y+12	; 0x0c
 24c:	9d 85       	ldd	r25, Y+13	; 0x0d
 24e:	89 2b       	or	r24, r25
 250:	69 f7       	brne	.-38     	; 0x22c <main+0x148>
 252:	14 c0       	rjmp	.+40     	; 0x27c <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 254:	68 85       	ldd	r22, Y+8	; 0x08
 256:	79 85       	ldd	r23, Y+9	; 0x09
 258:	8a 85       	ldd	r24, Y+10	; 0x0a
 25a:	9b 85       	ldd	r25, Y+11	; 0x0b
 25c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
 260:	dc 01       	movw	r26, r24
 262:	cb 01       	movw	r24, r22
 264:	9d 87       	std	Y+13, r25	; 0x0d
 266:	8c 87       	std	Y+12, r24	; 0x0c
 268:	8c 85       	ldd	r24, Y+12	; 0x0c
 26a:	9d 85       	ldd	r25, Y+13	; 0x0d
 26c:	99 8b       	std	Y+17, r25	; 0x11
 26e:	88 8b       	std	Y+16, r24	; 0x10
 270:	88 89       	ldd	r24, Y+16	; 0x10
 272:	99 89       	ldd	r25, Y+17	; 0x11
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <main+0x190>
 278:	99 8b       	std	Y+17, r25	; 0x11
 27a:	88 8b       	std	Y+16, r24	; 0x10
		_delay_ms(1000);
    }
 27c:	4e cf       	rjmp	.-356    	; 0x11a <main+0x36>

0000027e <__cmpsf2>:
 27e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__fp_cmp>
 282:	08 f4       	brcc	.+2      	; 0x286 <__cmpsf2+0x8>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	08 95       	ret

00000288 <__fixunssfsi>:
 288:	0e 94 9f 01 	call	0x33e	; 0x33e <__fp_splitA>
 28c:	88 f0       	brcs	.+34     	; 0x2b0 <__fixunssfsi+0x28>
 28e:	9f 57       	subi	r25, 0x7F	; 127
 290:	98 f0       	brcs	.+38     	; 0x2b8 <__fixunssfsi+0x30>
 292:	b9 2f       	mov	r27, r25
 294:	99 27       	eor	r25, r25
 296:	b7 51       	subi	r27, 0x17	; 23
 298:	b0 f0       	brcs	.+44     	; 0x2c6 <__fixunssfsi+0x3e>
 29a:	e1 f0       	breq	.+56     	; 0x2d4 <__fixunssfsi+0x4c>
 29c:	66 0f       	add	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	88 1f       	adc	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	1a f0       	brmi	.+6      	; 0x2ac <__fixunssfsi+0x24>
 2a6:	ba 95       	dec	r27
 2a8:	c9 f7       	brne	.-14     	; 0x29c <__fixunssfsi+0x14>
 2aa:	14 c0       	rjmp	.+40     	; 0x2d4 <__fixunssfsi+0x4c>
 2ac:	b1 30       	cpi	r27, 0x01	; 1
 2ae:	91 f0       	breq	.+36     	; 0x2d4 <__fixunssfsi+0x4c>
 2b0:	0e 94 b9 01 	call	0x372	; 0x372 <__fp_zero>
 2b4:	b1 e0       	ldi	r27, 0x01	; 1
 2b6:	08 95       	ret
 2b8:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_zero>
 2bc:	67 2f       	mov	r22, r23
 2be:	78 2f       	mov	r23, r24
 2c0:	88 27       	eor	r24, r24
 2c2:	b8 5f       	subi	r27, 0xF8	; 248
 2c4:	39 f0       	breq	.+14     	; 0x2d4 <__fixunssfsi+0x4c>
 2c6:	b9 3f       	cpi	r27, 0xF9	; 249
 2c8:	cc f3       	brlt	.-14     	; 0x2bc <__fixunssfsi+0x34>
 2ca:	86 95       	lsr	r24
 2cc:	77 95       	ror	r23
 2ce:	67 95       	ror	r22
 2d0:	b3 95       	inc	r27
 2d2:	d9 f7       	brne	.-10     	; 0x2ca <__fixunssfsi+0x42>
 2d4:	3e f4       	brtc	.+14     	; 0x2e4 <__fixunssfsi+0x5c>
 2d6:	90 95       	com	r25
 2d8:	80 95       	com	r24
 2da:	70 95       	com	r23
 2dc:	61 95       	neg	r22
 2de:	7f 4f       	sbci	r23, 0xFF	; 255
 2e0:	8f 4f       	sbci	r24, 0xFF	; 255
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	08 95       	ret

000002e6 <__fp_cmp>:
 2e6:	99 0f       	add	r25, r25
 2e8:	00 08       	sbc	r0, r0
 2ea:	55 0f       	add	r21, r21
 2ec:	aa 0b       	sbc	r26, r26
 2ee:	e0 e8       	ldi	r30, 0x80	; 128
 2f0:	fe ef       	ldi	r31, 0xFE	; 254
 2f2:	16 16       	cp	r1, r22
 2f4:	17 06       	cpc	r1, r23
 2f6:	e8 07       	cpc	r30, r24
 2f8:	f9 07       	cpc	r31, r25
 2fa:	c0 f0       	brcs	.+48     	; 0x32c <__fp_cmp+0x46>
 2fc:	12 16       	cp	r1, r18
 2fe:	13 06       	cpc	r1, r19
 300:	e4 07       	cpc	r30, r20
 302:	f5 07       	cpc	r31, r21
 304:	98 f0       	brcs	.+38     	; 0x32c <__fp_cmp+0x46>
 306:	62 1b       	sub	r22, r18
 308:	73 0b       	sbc	r23, r19
 30a:	84 0b       	sbc	r24, r20
 30c:	95 0b       	sbc	r25, r21
 30e:	39 f4       	brne	.+14     	; 0x31e <__fp_cmp+0x38>
 310:	0a 26       	eor	r0, r26
 312:	61 f0       	breq	.+24     	; 0x32c <__fp_cmp+0x46>
 314:	23 2b       	or	r18, r19
 316:	24 2b       	or	r18, r20
 318:	25 2b       	or	r18, r21
 31a:	21 f4       	brne	.+8      	; 0x324 <__fp_cmp+0x3e>
 31c:	08 95       	ret
 31e:	0a 26       	eor	r0, r26
 320:	09 f4       	brne	.+2      	; 0x324 <__fp_cmp+0x3e>
 322:	a1 40       	sbci	r26, 0x01	; 1
 324:	a6 95       	lsr	r26
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	81 1d       	adc	r24, r1
 32a:	81 1d       	adc	r24, r1
 32c:	08 95       	ret

0000032e <__fp_split3>:
 32e:	57 fd       	sbrc	r21, 7
 330:	90 58       	subi	r25, 0x80	; 128
 332:	44 0f       	add	r20, r20
 334:	55 1f       	adc	r21, r21
 336:	59 f0       	breq	.+22     	; 0x34e <__fp_splitA+0x10>
 338:	5f 3f       	cpi	r21, 0xFF	; 255
 33a:	71 f0       	breq	.+28     	; 0x358 <__fp_splitA+0x1a>
 33c:	47 95       	ror	r20

0000033e <__fp_splitA>:
 33e:	88 0f       	add	r24, r24
 340:	97 fb       	bst	r25, 7
 342:	99 1f       	adc	r25, r25
 344:	61 f0       	breq	.+24     	; 0x35e <__fp_splitA+0x20>
 346:	9f 3f       	cpi	r25, 0xFF	; 255
 348:	79 f0       	breq	.+30     	; 0x368 <__fp_splitA+0x2a>
 34a:	87 95       	ror	r24
 34c:	08 95       	ret
 34e:	12 16       	cp	r1, r18
 350:	13 06       	cpc	r1, r19
 352:	14 06       	cpc	r1, r20
 354:	55 1f       	adc	r21, r21
 356:	f2 cf       	rjmp	.-28     	; 0x33c <__fp_split3+0xe>
 358:	46 95       	lsr	r20
 35a:	f1 df       	rcall	.-30     	; 0x33e <__fp_splitA>
 35c:	08 c0       	rjmp	.+16     	; 0x36e <__fp_splitA+0x30>
 35e:	16 16       	cp	r1, r22
 360:	17 06       	cpc	r1, r23
 362:	18 06       	cpc	r1, r24
 364:	99 1f       	adc	r25, r25
 366:	f1 cf       	rjmp	.-30     	; 0x34a <__fp_splitA+0xc>
 368:	86 95       	lsr	r24
 36a:	71 05       	cpc	r23, r1
 36c:	61 05       	cpc	r22, r1
 36e:	08 94       	sec
 370:	08 95       	ret

00000372 <__fp_zero>:
 372:	e8 94       	clt

00000374 <__fp_szero>:
 374:	bb 27       	eor	r27, r27
 376:	66 27       	eor	r22, r22
 378:	77 27       	eor	r23, r23
 37a:	cb 01       	movw	r24, r22
 37c:	97 f9       	bld	r25, 7
 37e:	08 95       	ret

00000380 <__gesf2>:
 380:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__fp_cmp>
 384:	08 f4       	brcc	.+2      	; 0x388 <__gesf2+0x8>
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	08 95       	ret

0000038a <__mulsf3>:
 38a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__mulsf3x>
 38e:	0c 94 49 02 	jmp	0x492	; 0x492 <__fp_round>
 392:	0e 94 3b 02 	call	0x476	; 0x476 <__fp_pscA>
 396:	38 f0       	brcs	.+14     	; 0x3a6 <__mulsf3+0x1c>
 398:	0e 94 42 02 	call	0x484	; 0x484 <__fp_pscB>
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__mulsf3+0x1c>
 39e:	95 23       	and	r25, r21
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <__mulsf3+0x1c>
 3a2:	0c 94 32 02 	jmp	0x464	; 0x464 <__fp_inf>
 3a6:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_nan>
 3aa:	11 24       	eor	r1, r1
 3ac:	0c 94 ba 01 	jmp	0x374	; 0x374 <__fp_szero>

000003b0 <__mulsf3x>:
 3b0:	0e 94 97 01 	call	0x32e	; 0x32e <__fp_split3>
 3b4:	70 f3       	brcs	.-36     	; 0x392 <__mulsf3+0x8>

000003b6 <__mulsf3_pse>:
 3b6:	95 9f       	mul	r25, r21
 3b8:	c1 f3       	breq	.-16     	; 0x3aa <__mulsf3+0x20>
 3ba:	95 0f       	add	r25, r21
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	55 1f       	adc	r21, r21
 3c0:	62 9f       	mul	r22, r18
 3c2:	f0 01       	movw	r30, r0
 3c4:	72 9f       	mul	r23, r18
 3c6:	bb 27       	eor	r27, r27
 3c8:	f0 0d       	add	r31, r0
 3ca:	b1 1d       	adc	r27, r1
 3cc:	63 9f       	mul	r22, r19
 3ce:	aa 27       	eor	r26, r26
 3d0:	f0 0d       	add	r31, r0
 3d2:	b1 1d       	adc	r27, r1
 3d4:	aa 1f       	adc	r26, r26
 3d6:	64 9f       	mul	r22, r20
 3d8:	66 27       	eor	r22, r22
 3da:	b0 0d       	add	r27, r0
 3dc:	a1 1d       	adc	r26, r1
 3de:	66 1f       	adc	r22, r22
 3e0:	82 9f       	mul	r24, r18
 3e2:	22 27       	eor	r18, r18
 3e4:	b0 0d       	add	r27, r0
 3e6:	a1 1d       	adc	r26, r1
 3e8:	62 1f       	adc	r22, r18
 3ea:	73 9f       	mul	r23, r19
 3ec:	b0 0d       	add	r27, r0
 3ee:	a1 1d       	adc	r26, r1
 3f0:	62 1f       	adc	r22, r18
 3f2:	83 9f       	mul	r24, r19
 3f4:	a0 0d       	add	r26, r0
 3f6:	61 1d       	adc	r22, r1
 3f8:	22 1f       	adc	r18, r18
 3fa:	74 9f       	mul	r23, r20
 3fc:	33 27       	eor	r19, r19
 3fe:	a0 0d       	add	r26, r0
 400:	61 1d       	adc	r22, r1
 402:	23 1f       	adc	r18, r19
 404:	84 9f       	mul	r24, r20
 406:	60 0d       	add	r22, r0
 408:	21 1d       	adc	r18, r1
 40a:	82 2f       	mov	r24, r18
 40c:	76 2f       	mov	r23, r22
 40e:	6a 2f       	mov	r22, r26
 410:	11 24       	eor	r1, r1
 412:	9f 57       	subi	r25, 0x7F	; 127
 414:	50 40       	sbci	r21, 0x00	; 0
 416:	9a f0       	brmi	.+38     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 418:	f1 f0       	breq	.+60     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 41a:	88 23       	and	r24, r24
 41c:	4a f0       	brmi	.+18     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 41e:	ee 0f       	add	r30, r30
 420:	ff 1f       	adc	r31, r31
 422:	bb 1f       	adc	r27, r27
 424:	66 1f       	adc	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	91 50       	subi	r25, 0x01	; 1
 42c:	50 40       	sbci	r21, 0x00	; 0
 42e:	a9 f7       	brne	.-22     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 430:	9e 3f       	cpi	r25, 0xFE	; 254
 432:	51 05       	cpc	r21, r1
 434:	80 f0       	brcs	.+32     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 436:	0c 94 32 02 	jmp	0x464	; 0x464 <__fp_inf>
 43a:	0c 94 ba 01 	jmp	0x374	; 0x374 <__fp_szero>
 43e:	5f 3f       	cpi	r21, 0xFF	; 255
 440:	e4 f3       	brlt	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 442:	98 3e       	cpi	r25, 0xE8	; 232
 444:	d4 f3       	brlt	.-12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 446:	86 95       	lsr	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b7 95       	ror	r27
 44e:	f7 95       	ror	r31
 450:	e7 95       	ror	r30
 452:	9f 5f       	subi	r25, 0xFF	; 255
 454:	c1 f7       	brne	.-16     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 456:	fe 2b       	or	r31, r30
 458:	88 0f       	add	r24, r24
 45a:	91 1d       	adc	r25, r1
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret

00000464 <__fp_inf>:
 464:	97 f9       	bld	r25, 7
 466:	9f 67       	ori	r25, 0x7F	; 127
 468:	80 e8       	ldi	r24, 0x80	; 128
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	08 95       	ret

00000470 <__fp_nan>:
 470:	9f ef       	ldi	r25, 0xFF	; 255
 472:	80 ec       	ldi	r24, 0xC0	; 192
 474:	08 95       	ret

00000476 <__fp_pscA>:
 476:	00 24       	eor	r0, r0
 478:	0a 94       	dec	r0
 47a:	16 16       	cp	r1, r22
 47c:	17 06       	cpc	r1, r23
 47e:	18 06       	cpc	r1, r24
 480:	09 06       	cpc	r0, r25
 482:	08 95       	ret

00000484 <__fp_pscB>:
 484:	00 24       	eor	r0, r0
 486:	0a 94       	dec	r0
 488:	12 16       	cp	r1, r18
 48a:	13 06       	cpc	r1, r19
 48c:	14 06       	cpc	r1, r20
 48e:	05 06       	cpc	r0, r21
 490:	08 95       	ret

00000492 <__fp_round>:
 492:	09 2e       	mov	r0, r25
 494:	03 94       	inc	r0
 496:	00 0c       	add	r0, r0
 498:	11 f4       	brne	.+4      	; 0x49e <__fp_round+0xc>
 49a:	88 23       	and	r24, r24
 49c:	52 f0       	brmi	.+20     	; 0x4b2 <__fp_round+0x20>
 49e:	bb 0f       	add	r27, r27
 4a0:	40 f4       	brcc	.+16     	; 0x4b2 <__fp_round+0x20>
 4a2:	bf 2b       	or	r27, r31
 4a4:	11 f4       	brne	.+4      	; 0x4aa <__fp_round+0x18>
 4a6:	60 ff       	sbrs	r22, 0
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__fp_round+0x20>
 4aa:	6f 5f       	subi	r22, 0xFF	; 255
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	8f 4f       	sbci	r24, 0xFF	; 255
 4b0:	9f 4f       	sbci	r25, 0xFF	; 255
 4b2:	08 95       	ret

000004b4 <_exit>:
 4b4:	f8 94       	cli

000004b6 <__stop_program>:
 4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <__stop_program>
